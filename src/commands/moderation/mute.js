import { Mute } from '../../models/Mute.js';

export default {
  name: 'mute',
  args: {user: 'user', time: 'int', reason: {type: 'string', required: false}},
  handler: async (client, message, args) => {
    try {
      const { user, time, reason } = args;
      const dialogId = message.Dialog.ID;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–º—É—á–µ–Ω–∏–π
      const existingMute = await Mute.findActive(dialogId, user.ID);
      if (existingMute) {
        return message.reply(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–º—É—á–µ–Ω–∏–π –¥–æ ${existingMute.until.toLocaleString('uk-UA')}`);
      }

      if (message.Dialog.Type !== 'group') {
        return message.reply('‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö!');
      }

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º—É—Ç—É –≤ –±–∞–∑—É
      await Mute.create(dialogId, user.ID, time, reason);
      
      const muteUntil = new Date(Date.now() + time * 60 * 1000);
      const response = [
        `üîá –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.Name} ${user.Surname} –∑–∞–º—É—á–µ–Ω–æ`,
        `‚è∞ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${time} —Ö–≤–∏–ª–∏–Ω`,
        `üìÖ –î–æ: ${muteUntil.toLocaleString('uk-UA')}`,
        reason ? `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}` : ''
      ].filter(Boolean).join('\n');
      
      message.reply(response);
    } catch (error) {
      console.error('Mute error:', error);
      message.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—ñ –º—É—Ç—É');
    }
  }
}; 